'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var PropTypes = React.PropTypes;

module.exports = React.createClass({

  displayName: 'Field',

  propTypes: {
    type: PropTypes.string,
    stopChangePropagation: PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      stopChangePropagation: true,
      type: 'text'
    };
  },

  render: function render() {
    var onChange = null;

    if (typeof this.props.onChange === 'function') {
      //only pass our onChange if the user provided one
      //so the React warning is still displayed if the user didn't provide onChange
      //but provided value
      onChange = this.onChange;
    }

    return React.createElement('input', _extends({}, this.props, { onChange: onChange, ref: 'input' }));
  },

  focus: function focus() {
    React.findDOMNode(this.refs.input).focus();
  },

  onChange: function onChange(event) {
    if (this.props.stopChangePropagation) {
      event.stopPropagation();
    }

    this.props.onChange(event.target.value, event);
  }
});